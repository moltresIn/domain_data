name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: read
  id-token: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'  # Updated to Go 1.21
      - name: Install Dependencies
        run: |
          go mod tidy
          go build -v ./...
      - name: Run Tests
        run: |
          go test -v ./...
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Debug Environment Variables
        run: |
          echo "GitHub event name: ${{ github.event_name }}"
          echo "GitHub actor: ${{ github.actor }}"
          echo "GitHub repository: ${{ github.repository }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Is pull request: ${{ github.event_name == 'pull_request' }}"
          # Only check this if it's a pull request
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Is fork pull request: ${{ github.event.pull_request.head.repo.fork == true }}"
          fi
      
      - name: Debug Secret Availability
        env:
          SECRET_CHECK: "${{ secrets.GCP_CREDENTIALS }}"
        run: |
          echo "Checking secret availability..."
          if [ -n "$SECRET_CHECK" ]; then
            echo "GCP_CREDENTIALS secret is available (content not shown for security)"
            echo "Secret length: $(echo "$SECRET_CHECK" | wc -c) characters"
            # Check if it's valid JSON (without exposing content)
            echo "Checking if secret is valid JSON..."
            echo "$SECRET_CHECK" | jq -e . > /dev/null 2>&1
            if [ $? -eq 0 ]; then
              echo "Secret appears to be valid JSON"
            else
              echo "WARNING: Secret does not appear to be valid JSON"
            fi
          else
            echo "ERROR: GCP_CREDENTIALS secret is NOT available"
            echo "This could be because:"
            echo "- The secret is not defined in your repository"
            echo "- The secret name might be different than 'GCP_CREDENTIALS'"
            echo "- This workflow is running from a fork or Dependabot"
          fi
      
      - name: Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Check gcloud Status
        run: |
          echo "Checking gcloud authentication status..."
          gcloud auth list
          echo "Checking gcloud project config..."
          gcloud config list project
      
      - name: Set GCP Project
        run: gcloud config set project ornate-crossbar-450707-p6
      
      - name: Verify GCP Configuration
        run: gcloud config list
      
      - name: Create app.yaml if not exists
        run: |
          if [ ! -f app.yaml ]; then
            echo "Creating app.yaml file..."
            cat > app.yaml << 'EOL'
          runtime: go121  # Using Go 1.21 runtime (latest supported)
          
          service: default  # Use 'default' service or replace with your specific service name
          
          instance_class: F1  # Smallest, cheapest instance
          
          automatic_scaling:
            min_idle_instances: 0
            max_idle_instances: 1
            min_instances: 0
            max_instances: 1
            min_pending_latency: 3000ms  # Minimum latency target for requests
            max_pending_latency: automatic
            max_concurrent_requests: 40
          
          handlers:
          - url: /.*
            script: auto
            secure: always  # Ensures all traffic uses HTTPS
          EOL
            echo "app.yaml created successfully"
            cat app.yaml
          else
            echo "app.yaml already exists, using existing file"
            cat app.yaml
          fi
      
      - name: List Files
        run: |
          echo "Current directory contents:"
          ls -la
      
      - name: Deploy to GCP
        run: gcloud app deploy --quiet
